<?php
/**
 * Copyright Â© Acesofspades. All rights reserved.
 * See LICENSE.txt for license details.
 */

namespace Aos\CustomerView\Block\Adminhtml;

use Magento\Framework\App\ResourceConnection;
use Magento\Store\Model\StoreManagerInterface;

/**
 * Class CustomerView
 *
 * @package Aos\Customerview\Block\Adminhtml
 */
class RewriteResolver
{

    /**
     * @var StoreManagerInterface
     */
    protected $storeManager;

    /**
     * @var \Magento\Framework\App\ResourceConnection
     */
    protected $resource;

    /**
     * RewriteResolver constructor.
     *
     * @param StoreManagerInterface $storeManager
     * @param ResourceConnection $resource
     */
    public function __construct(
        StoreManagerInterface $storeManager,
        ResourceConnection $resource
    ) {
        $this->storeManager = $storeManager;
        $this->resource     = $resource;
    }

    /**
     * Retrieve connection object
     *
     * @return \Magento\Framework\DB\Adapter\AdapterInterface
     */
    public function getConnection()
    {
        return $this->resource->getConnection(\Magento\Framework\App\ResourceConnection::DEFAULT_CONNECTION);
    }

    /**
     * Retrieve table name
     *
     * @param string $table
     *
     * @return string
     */
    public function getTable($table)
    {
        return $this->resource->getTableName($table);
    }

    /**
     * Get store
     *
     * @return \Magento\Store\Api\Data\StoreInterface|null
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getStore()
    {
        $store = $this->storeManager->getStore();

        $storeId = $store->getId();

        if (!$storeId) {
            $store = $this->storeManager->getDefaultStoreView();

            if ($store) {
                return $store;
            }
        }

        return $store;
    }

    /**
     * Gets url rewrites
     *
     * @param int $entityId
     * @param string $entityType
     *
     * @return array
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function getUrlRewrites(int $entityId, string $entityType)
    {
        $urlRewrites = [];

        $select = $this->getConnection()
                       ->select()
                       ->from(['u' => $this->getTable('url_rewrite')], ['u.entity_id', 'u.request_path'])
                       ->where('u.store_id = ?', $this->getStore()->getId())
                       ->where('u.is_autogenerated = 1')
                       ->where('u.entity_type = ?', $entityType)
                       ->where('u.entity_id = ?', $entityId);

        foreach ($this->getConnection()->fetchAll($select) as $row) {
            $urlRewrites[] = $row['request_path'];
        }

        return $urlRewrites;
    }
}
